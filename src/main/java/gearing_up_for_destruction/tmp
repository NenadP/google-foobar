

public class Solution {
    public static int[] solution(int[] pegs) {
        boolean isEven = pegs.length % 2 == 0;

        if (pegs.length < 2) {
            return new int[]{-1, -1};
        }

        int a = -1;
        int b = isEven ? 3 : 1;

        int firstDist = pegs[1] - pegs[0];
        int bruteForceRange = isEven ? firstDist * 3 : firstDist;


        for (int i = 0; i < bruteForceRange; i++) {
            int lastGearRadius = (int) (getLastGearRadius(pegs, (double) i / b));
            if (lastGearRadius == (int) ((double) (i + (isEven ? 0 : 1)) / b / 2)) {
                a = i;
                break;
            }
        }
        if (a == -1) {
            return new int[]{-1, -1};
        }

        if (isEven && a % 3 == 0) {
            a = a / 3;
            b = 1;
        }

        return new int[]{a, b};
    }

    static double getLastGearRadius(int[] pegs, double firstGearRadius) {
        boolean isEven = pegs.length % 2 == 0;
        double radius = firstGearRadius;
        for (int i = 0; i < pegs.length - 1; i++) {
            int distance = pegs[i + 1] - pegs[i];
            radius = distance - radius;
            if (radius < 2) {
                return -1;
            }
        }
        return radius;
    }
}